plugins {
  id 'idea'
  id 'com.github.ben-manes.versions'
  id 'scala'
  id 'io.miret.etienne.sass'
}

idea {
  module {
    excludeDirs += [
      file('.idea'),
      file('gradle')
    ]
  }
}

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')

tasks.withType(ScalaCompile) {
  scalaCompileOptions.with {
//  targetCompatibility = '1.8'
    additionalParameters = [
      '-new-syntax',
      '-feature',
      '-language:strictEquality',
      //'-source:future',
      //'-deprecation',
      //'-unchecked',
      //'-Xsemanticdb',
      //'-Ysafe-init',
      //'-explain',
    ]
  }
}

description = '19 Kislev Archive'

dependencies {
  implementation libs.scala.library
  implementation libs.opentorah.collector
  implementation libs.opentorah.base // for the Cutter
}

compileSass {
  group = 'publishing'

  version = '1.34.0'

  sourceDir = project.file ("$rootDir/sass")
  outputDir = project.file ("$rootDir/css")
}

task buildSite(type: JavaExec) {
  group = 'publishing'
  dependsOn(compileSass)

  mainClass = 'org.opentorah.collector.CollectorService'
  args = ['buildSite', rootDir]
  classpath = sourceSets.main.runtimeClasspath
}

task buildAndPrettyPrintSite(type: JavaExec) {
  group = 'publishing'
  dependsOn(compileSass)

  mainClass = 'org.opentorah.collector.CollectorService'
  args = ['buildAndPrettyPrintSite', rootDir]
  classpath = sourceSets.main.runtimeClasspath
}

final String gcloudServiceAccountKey =
  findProperty('gcloudServiceAccountKey') ?:
  System.getenv('gcloudServiceAccountKey') ?:
  "nokey"

task uploadSite(type: JavaExec) {
  group = 'publishing'
  dependsOn(buildSite)

  mainClass = 'org.opentorah.collector.CollectorService'
  args = ['uploadSite', rootDir, gcloudServiceAccountKey]
  classpath = sourceSets.main.runtimeClasspath
}

task uploadSiteDryRun(type: JavaExec) {
  group = 'publishing'
  dependsOn(buildSite)

  mainClass = 'org.opentorah.collector.CollectorService'
  args = ['uploadSiteDryRun', rootDir, gcloudServiceAccountKey]
  classpath = sourceSets.main.runtimeClasspath
}

task serveSite(type: JavaExec) {
  group = 'publishing'

  mainClass = 'org.opentorah.collector.CollectorService'
  args = ['serveSite', "file://$rootDir/"]
  classpath = sourceSets.main.runtimeClasspath
}

task serveRemoteSite(type: JavaExec) {
  group = 'publishing'

  mainClass = 'org.opentorah.collector.CollectorService'
  args = ['serveRemoteSite']
  classpath = sourceSets.main.runtimeClasspath
}
